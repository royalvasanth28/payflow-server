package com.payflow.payflow.dao;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.payflow.payflow.entity.Contact;
import com.payflow.payflow.exception.ResourceNotFoundException;
import com.payflow.payflow.repository.ContactRepository;

@Repository
public class ContactDao {
	
	@Autowired
	private ContactRepository contactRepository;
	
	public Contact addContact(Contact contact) {
		contact.setCreatedAt(LocalDateTime.now());
		return contactRepository.save(contact);
	}
	
	public Contact getContactById(Long contactId) {
		return contactRepository.findById(contactId).orElse(null);
		
	}
	
	public List<Contact> getAllContact() {
		return contactRepository.findAll();
	}
	
//	public Contact updateContact(Contact contact) {
//		Optional<Contact> optional=contactRepository.findById(contact.getContactId());
//		if(optional.isPresent()) {
//			Contact existContact=optional.get();
//			
//			existContact.setName(contact.getName());
//			existContact.setEmail(contact.getEmail());
//			existContact.setPhone(contact.getPhone());
//			existContact.setWebsite(contact.getWebsite());
//			existContact.setStatus(contact.getStatus());
//			existContact.setFacebook(contact.getFacebook());
//			existContact.setNotes(contact.getNotes());
//			existContact.setGst(contact.getGst());
//			existContact.setImageId(contact.getImageId());
//			existContact.setDueListing(contact.getDueListing());
//			existContact.setCreatedBy(contact.getCreatedBy());
//			existContact.setUpdatedBy(contact.getUpdatedBy());
//			existContact.setUpdatedAt(LocalDateTime.now());
//			existContact.setContactType(contact.getContactType());
//			
//			
//			return contactRepository.save(existContact);
//		}else {
//			return null;
//		}
//	}
//	
	public Contact updateContact(Contact contact) {
		Contact existcontact = contactRepository.findById(contact.getContactId())
				.orElseThrow(()->new ResourceNotFoundException("Contact info not found with id : "+contact.getContactId()));
		existcontact.setName(contact.getName());
		existcontact.setEmail(contact.getEmail());
		existcontact.setPhone(contact.getPhone());
		existcontact.setWebsite(contact.getWebsite());
		existcontact.setStatus(contact.getStatus());
		existcontact.setFacebook(contact.getFacebook());
		existcontact.setNotes(contact.getNotes());
		existcontact.setGst(contact.getGst());
		existcontact.setImageId(contact.getImageId());
		existcontact.setDueListing(contact.getDueListing());
		existcontact.setCreatedBy(contact.getCreatedBy());
		existcontact.setUpdatedBy(contact.getUpdatedBy());
		existcontact.setUpdatedAt(LocalDateTime.now());
		existcontact.setContactType(contact.getContactType());
}
	
	
	
	
	
	
	
	
	
	
	public Contact deleteContact(Long contactId) {
		Contact contact= contactRepository.findByIdAndDeletedAtIsNull(contactId)
		.orElseThrow(()-> new ResourceNotFoundException("Contact not found or already deleted with id: " + contactId));
		
		contact.setDeletedAt(LocalDateTime.now());
		return contactRepository.save(contact);
	}
}
