package com.payflow.payflow.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.payflow.payflow.dao.ContactDao;
import com.payflow.payflow.dto.ResponseStructure;
import com.payflow.payflow.entity.Contact;
import com.payflow.payflow.exception.IdNotFoundException;
import com.payflow.payflow.exception.ResourceNotFoundException;

@Service
public class ContactService {

	@Autowired
	private ContactDao contactDao;
	
	public ResponseEntity<ResponseStructure<Contact>> addContact(Contact contact){
		Contact contactSaved = contactDao.addContact(contact);
		ResponseStructure<Contact> responseStructure = new ResponseStructure<Contact>();
		responseStructure.setStatus(true);
		responseStructure.setMessage("Contact Saved Successfully");
		responseStructure.setData(contactSaved);
		
		return new ResponseEntity<ResponseStructure<Contact>>(responseStructure,HttpStatus.CREATED);
	}
	
	public ResponseEntity<ResponseStructure<Contact>> getContactById(Long contactId){
		Contact contact=contactDao.getContactById(contactId);
		ResponseStructure<Contact> responseStructure = new ResponseStructure<Contact>();
		
		if(contact!=null) {
			responseStructure.setStatus(true);
			responseStructure.setMessage("Contact detail fetched successfully");
			responseStructure.setData(contact);
			return new ResponseEntity<ResponseStructure<Contact>>(responseStructure,HttpStatus.OK);
		}else {
			throw new IdNotFoundException();
		}
	}
	
	public ResponseEntity<ResponseStructure<List<Contact>>> getAllContact(){
		List<Contact> contacts=contactDao.getAllContact();
		ResponseStructure<List<Contact>> responseStructure = new ResponseStructure<List<Contact>>();
		if(contacts.size()>0) {
			responseStructure.setStatus(true);
			responseStructure.setMessage("Contact details fetched successfully");
			responseStructure.setData(contacts);
			
			return new ResponseEntity<ResponseStructure<List<Contact>>>(responseStructure,HttpStatus.OK);
		}else {
			throw new ResourceNotFoundException("Contacts not found");	
		}
	}
	
	public ResponseEntity<ResponseStructure<Contact>> updateContact(Contact contact){
		Contact updateContact=contactDao.updateContact(contact);
		ResponseStructure<Contact> responseStructure = new ResponseStructure<Contact>();
		if(updateContact!= null) {
			responseStructure.setStatus(true);
			responseStructure.setMessage("Contact update successfully");
			responseStructure.setData(updateContact);
			return new ResponseEntity<ResponseStructure<Contact>>(responseStructure,HttpStatus.OK);
		}else {
			throw new IdNotFoundException();
		}
	}
	
	public ResponseEntity<ResponseStructure<Contact>> deleteContact(Long contactId){
		Contact contact=contactDao.deleteContact(contactId);
		
		ResponseStructure<Contact> responseStructure = new ResponseStructure<Contact>();
		responseStructure.setStatus(true);
		responseStructure.setMessage("Record Deleted Successfully");
		responseStructure.setData(contact);
		
		return new ResponseEntity<ResponseStructure<Contact>>(responseStructure,HttpStatus.OK);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
}
